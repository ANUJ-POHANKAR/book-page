# Step 1: Build the Angular application
FROM node:18 AS build

# Set the working directory
WORKDIR /app

# Copy package.json and install dependencies
COPY package.json package-lock.json ./
RUN npm install

# Copy the rest of the application files
COPY . .

# Build the Angular application
RUN npm run build --prod

# Step 2: Serve the Angular application using NGINX
FROM nginx:alpine

# Copy the built Angular files to NGINX's public folder
COPY --from=build /app/dist/<your-angular-app-name> /usr/share/nginx/html

# Expose port 80 to access the Angular app
EXPOSE 80

# Start NGINX server
CMD ["nginx", "-g", "daemon off;"]
===================================================================================================================================================================================

# Step 1: Build the Spring Boot application
FROM maven:3.8.6-openjdk-17-slim AS build

# Set the working directory
WORKDIR /app

# Copy the pom.xml and install dependencies
COPY pom.xml ./
RUN mvn dependency:go-offline

# Copy the source code and build the application
COPY src /app/src
RUN mvn clean package -DskipTests

# Step 2: Run the Spring Boot application
FROM openjdk:17-jdk-slim

# Set the working directory for the backend
WORKDIR /app

# Copy the JAR file from the build stage
COPY --from=build /app/target/backend-0.0.1-SNAPSHOT.jar /app/backend.jar

# Expose the backend port (8080)
EXPOSE 8080

# Run the Spring Boot application
CMD ["java", "-jar", "backend.jar"]

=============================================================================================================================================================================================================

For Angular Frontend:

docker build -t angular-frontend .
docker run -p 80:80 angular-frontend

For Spring Boot Backend:

docker build -t spring-backend .
docker run -p 8080:8080 spring-backend





